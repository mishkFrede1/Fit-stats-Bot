from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
import json

from data import keyboards, texts
from db_manager import Manager
from utils.get_friends_keyboard import get_friends_keyboard

router = Router()
manager = Manager()

@router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§")
async def account_settings(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=keyboards.account_settings)
        
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())

@router.message(Command("acc"))
async def account_settings_command(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=keyboards.account_settings)
        
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())


@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üóì")
async def schedule(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=keyboards.schedule_settings)
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())

@router.message(Command("sched"))
async def schedule_command(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=keyboards.schedule_settings)
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())



@router.message(F.text == "–ó–∞–ø–∏—Å—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π ‚úèÔ∏è")
async def recording_menu(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –ú–µ–Ω—é –∑–∞–ø–∏—Å–µ–π:", reply_markup=keyboards.records_settings)
        
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())

@router.message(Command("rec"))
async def recording_menu_command(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –ú–µ–Ω—é –∑–∞–ø–∏—Å–µ–π:", reply_markup=keyboards.records_settings)
        
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())


@router.message(Command("about"))
async def about_command(message: Message):
    with open("config.json", "r") as config_file:
        config = json.load(config_file)

        bot_version = config["bot_version"]
        github = config["github"]

        telegram = config["creator"]["telegram_link"]
        vk = config["creator"]["vk_link"]
        await message.answer(texts.bot_info_text.format(bot_version=bot_version, github=github, telegram=telegram, vk=vk), parse_mode="html", disable_web_page_preview=True)

@router.message(F.text == "–û –±–æ—Ç–µ ‚ÑπÔ∏è")
async def about(message: Message):
    with open("config.json", "r") as config_file:
        config = json.load(config_file)

        bot_version = config["bot_version"]
        github = config["github"]

        telegram = config["creator"]["telegram_link"]
        vk = config["creator"]["vk_link"]
        await message.answer(texts.bot_info_text.format(bot_version=bot_version, github=github, telegram=telegram, vk=vk), parse_mode="html", disable_web_page_preview=True)


async def friends_text_send(message: Message):
    if manager.user_exists(message.from_user.id):
        friends = manager.get_user_data(message.from_user.id)[11]
        if friends == None:
            await message.answer("‚öôÔ∏è <b>–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –í–∞–º —Å–ª–µ–¥—É–µ—Ç –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å.</b>", parse_mode="html", reply_markup=keyboards.friends)
        else:
            await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—è:", parse_mode="html", reply_markup=keyboards.friends)
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())

@router.message(Command("friends"))
async def friends_command(message: Message):
    await friends_text_send(message)

@router.message(F.text == "–î—Ä—É–∑—å—è üë•")
async def friends(message: Message):
    await friends_text_send(message)

@router.message(F.text == "–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π üë•")
async def friends_list_button(message: Message):
    if manager.user_exists(message.from_user.id):
        friends = manager.get_user_data(message.from_user.id)[11]
        if friends == None:
            await message.answer("‚öôÔ∏è <b>–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –í–∞–º —Å–ª–µ–¥—É–µ—Ç –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å.</b>", parse_mode="html")
        else:
            await message.answer("üìë <b>–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π</b>:", parse_mode="html", reply_markup=get_friends_keyboard(friends))
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())


@router.message(F.text == "–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà")
async def stats(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboards.stats)
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())

@router.message(Command("stats"))
async def stats_command(message: Message):
    if manager.user_exists(message.from_user.id):
        await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboards.stats)
    else:
        await message.answer(texts.unregistered_access_text, parse_mode="html", reply_markup=ReplyKeyboardRemove())